<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oopsw.seongsubean.account.repository.AccountRepository">
  <update id="setUserInfo" parameterType="com.oopsw.seongsubean.account.dto.UserDTO">
    UPDATE USER_INFO
    <set>
      <if test="newPassword != null and !newPassword.isEmpty()">
        PASSWORD = #{newPassword},
      </if>
      <if test="newNickName != null and !newNickName.isEmpty()">
        NICKNAME = #{newNickName}
      </if>
    </set>
    WHERE EMAIL = #{email}
  </update>

  <update id="setImage" parameterType="com.oopsw.seongsubean.account.dto.UserDTO">
    update USER_INFO
    set IMAGE = #{image}
    where EMAIL = #{email}
  </update>
  <delete id="removeUser" parameterType="String">
    delete from user_info where EMAIL=#{email}
  </delete>

  <select id="getUserInfo" parameterType="com.oopsw.seongsubean.account.dto.UserDTO"
    resultType="com.oopsw.seongsubean.account.dto.UserDTO">
    select nickname, image from USER_INFO
    where EMAIL = #{email} AND PASSWORD = #{password}
  </select> <!--안쓸듯?-->

  <insert id="addUser" parameterType="com.oopsw.seongsubean.account.dto.UserDTO">
    INSERT INTO USER_INFO (email, nickname, password, birthdate, phone_number, join_date)
    VALUES (#{email}, #{nickName}, #{password}, #{birthDate}, #{phoneNumber}, NOW())
  </insert>
  <select id="getUserByEmailAndPassword" parameterType="com.oopsw.seongsubean.account.dto.UserDTO"
    resultType="com.oopsw.seongsubean.account.dto.UserDTO">
    select email, nickname from USER_INFO
    where EMAIL = #{email} and PASSWORD = #{password}
  </select>
  <select id="getMyBoards" parameterType="String" resultType="java.util.Map">
    SELECT '자유' AS BOARD_TYPE, TITLE, CREATED_DATE
    FROM FREE_BOARD
    WHERE EMAIL = #{email}

    UNION ALL

    SELECT '제보' AS BOARD_TYPE, TITLE, CREATED_DATE
    FROM REPORT_BOARD
    WHERE EMAIL = #{email}

    ORDER BY CREATED_DATE DESC
  </select>
  <select id="getMyReviews" parameterType="String" resultType="java.util.Map">
    select c.CAFE_NAME, r.REVIEW_CONTENTS, r.REVIEW_DATE
    from CAFE_INFO c
           join REVIEW r on c.CAFE_ID = r.CAFE_ID
    where r.EMAIL= #{email}
    order by r.REVIEW_DATE desc
  </select>
  <select id="getMyCafes" resultType="java.util.Map">
    SELECT
      c.MAIN_IMAGE,
      c.CAFE_NAME,
      CONCAT(c.ADDRESS, ' ', c.DETAIL_ADDRESS) AS ADDRESS,
      ROUND(IFNULL(AVG(r.STAR_SCORE), 0.0), 1) AS AVG_STAR,
      COUNT(r.REVIEW_ID) AS REVIEW_COUNT
    FROM CAFE_INFO c
           LEFT JOIN REVIEW r ON c.CAFE_ID = r.CAFE_ID
    WHERE c.EMAIL = #{email}
    GROUP BY c.CAFE_ID
  </select>

  <select id="existsEmail" parameterType="String" resultType="boolean">
    SELECT COUNT(*) > 0
    FROM USER_INFO
    WHERE EMAIL = #{email}
  </select>
  <select id="existsNickName" parameterType="String" resultType="boolean">
    SELECT COUNT(*) > 0
    FROM USER_INFO
    WHERE NICKNAME = #{nickName}
  </select>

  <select id="findByEmail" resultType="com.oopsw.seongsubean.account.dto.UserDTO">
    SELECT email, password, role, nickname, image
    FROM user_info
    WHERE email = #{email}
  </select>
</mapper>